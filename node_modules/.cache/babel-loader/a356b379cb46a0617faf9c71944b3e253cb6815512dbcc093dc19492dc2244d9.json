{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  isConnected: false,\n  connectionType: 'mesh',\n  // 'mesh', 'direct', 'relay'\n  peers: [],\n  activeConnections: 0,\n  networkStats: {\n    latency: 0,\n    bandwidth: 0,\n    packetLoss: 0,\n    connectedPeers: 0\n  },\n  meshNetwork: {\n    nodeId: null,\n    neighbors: [],\n    routingTable: {},\n    messageQueue: []\n  },\n  sync: {\n    isSynchronized: false,\n    lastSync: null,\n    pendingChanges: []\n  }\n};\nconst networkSlice = createSlice({\n  name: 'network',\n  initialState,\n  reducers: {\n    connect: state => {\n      state.isConnected = true;\n    },\n    disconnect: state => {\n      state.isConnected = false;\n      state.peers = [];\n      state.activeConnections = 0;\n    },\n    addPeer: (state, action) => {\n      if (!state.peers.find(peer => peer.id === action.payload.id)) {\n        state.peers.push(action.payload);\n        state.activeConnections++;\n      }\n    },\n    removePeer: (state, action) => {\n      state.peers = state.peers.filter(peer => peer.id !== action.payload);\n      state.activeConnections = Math.max(0, state.activeConnections - 1);\n    },\n    updateNetworkStats: (state, action) => {\n      state.networkStats = {\n        ...state.networkStats,\n        ...action.payload\n      };\n    },\n    setNodeId: (state, action) => {\n      state.meshNetwork.nodeId = action.payload;\n    },\n    updateNeighbors: (state, action) => {\n      state.meshNetwork.neighbors = action.payload;\n    },\n    updateRoutingTable: (state, action) => {\n      state.meshNetwork.routingTable = {\n        ...state.meshNetwork.routingTable,\n        ...action.payload\n      };\n    },\n    addMessageToQueue: (state, action) => {\n      state.meshNetwork.messageQueue.push(action.payload);\n    },\n    clearMessageQueue: state => {\n      state.meshNetwork.messageQueue = [];\n    },\n    setSynchronized: (state, action) => {\n      state.sync.isSynchronized = action.payload;\n      state.sync.lastSync = Date.now();\n    }\n  }\n});\nexport const {\n  connect,\n  disconnect,\n  addPeer,\n  removePeer,\n  updateNetworkStats,\n  setNodeId,\n  updateNeighbors,\n  updateRoutingTable,\n  addMessageToQueue,\n  clearMessageQueue,\n  setSynchronized\n} = networkSlice.actions;\nexport default networkSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","isConnected","connectionType","peers","activeConnections","networkStats","latency","bandwidth","packetLoss","connectedPeers","meshNetwork","nodeId","neighbors","routingTable","messageQueue","sync","isSynchronized","lastSync","pendingChanges","networkSlice","name","reducers","connect","state","disconnect","addPeer","action","find","peer","id","payload","push","removePeer","filter","Math","max","updateNetworkStats","setNodeId","updateNeighbors","updateRoutingTable","addMessageToQueue","clearMessageQueue","setSynchronized","Date","now","actions","reducer"],"sources":["/Users/xe/Desktop/Fast1/src/store/slices/networkSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  isConnected: false,\n  connectionType: 'mesh', // 'mesh', 'direct', 'relay'\n  peers: [],\n  activeConnections: 0,\n  networkStats: {\n    latency: 0,\n    bandwidth: 0,\n    packetLoss: 0,\n    connectedPeers: 0,\n  },\n  meshNetwork: {\n    nodeId: null,\n    neighbors: [],\n    routingTable: {},\n    messageQueue: [],\n  },\n  sync: {\n    isSynchronized: false,\n    lastSync: null,\n    pendingChanges: [],\n  },\n};\n\nconst networkSlice = createSlice({\n  name: 'network',\n  initialState,\n  reducers: {\n    connect: (state) => {\n      state.isConnected = true;\n    },\n    disconnect: (state) => {\n      state.isConnected = false;\n      state.peers = [];\n      state.activeConnections = 0;\n    },\n    addPeer: (state, action) => {\n      if (!state.peers.find(peer => peer.id === action.payload.id)) {\n        state.peers.push(action.payload);\n        state.activeConnections++;\n      }\n    },\n    removePeer: (state, action) => {\n      state.peers = state.peers.filter(peer => peer.id !== action.payload);\n      state.activeConnections = Math.max(0, state.activeConnections - 1);\n    },\n    updateNetworkStats: (state, action) => {\n      state.networkStats = { ...state.networkStats, ...action.payload };\n    },\n    setNodeId: (state, action) => {\n      state.meshNetwork.nodeId = action.payload;\n    },\n    updateNeighbors: (state, action) => {\n      state.meshNetwork.neighbors = action.payload;\n    },\n    updateRoutingTable: (state, action) => {\n      state.meshNetwork.routingTable = { ...state.meshNetwork.routingTable, ...action.payload };\n    },\n    addMessageToQueue: (state, action) => {\n      state.meshNetwork.messageQueue.push(action.payload);\n    },\n    clearMessageQueue: (state) => {\n      state.meshNetwork.messageQueue = [];\n    },\n    setSynchronized: (state, action) => {\n      state.sync.isSynchronized = action.payload;\n      state.sync.lastSync = Date.now();\n    },\n  },\n});\n\nexport const {\n  connect,\n  disconnect,\n  addPeer,\n  removePeer,\n  updateNetworkStats,\n  setNodeId,\n  updateNeighbors,\n  updateRoutingTable,\n  addMessageToQueue,\n  clearMessageQueue,\n  setSynchronized,\n} = networkSlice.actions;\n\nexport default networkSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}